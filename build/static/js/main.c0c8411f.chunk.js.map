{"version":3,"sources":["components/Note.js","components/Form.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Form","onSubmit","onChange","text","input","onfocus","onblur","value","onFocus","onBlur","type","Notification","message","className","Footer","style","color","fontStyle","fontSize","baseURL","axios","get","then","res","data","newNote","post","id","put","App","props","useState","notes","setNotes","setNewNote","showAll","setShowAll","setMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","setTimeout","catch","e","key","preventDefault","addedNote","length","date","Date","toISOString","Math","random","concat","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0c8411f.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Note = ({ note , toggleImportance }) => {\n  const label = note.important\n    ? 'make not important'\n    : 'make important'\n\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\n  export default Note","import React from 'react'\n\nconst Form = ({onSubmit, onChange, text, input, onfocus ,onblur}) => (\n    <form onSubmit={onSubmit}>\n      <input \n        value={input}\n        onChange={onChange}\n        onFocus={onfocus}\n        onBlur={onblur}\n      />\n      <button type=\"submit\">{text}</button>\n    </form>\n  )\n\n  export default Form","import React from 'react'\n\nconst Notification = ({ message }) => \n    (message)\n        ? <div className={message.type}>\n            {message.text}\n        </div>\n        : null\n\nexport default Notification","import React from 'react'\n\nconst Footer= () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, BIH Cluster approved</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from 'axios'\nconst baseURL = 'http://localhost:3001/notes'\n\nconst getAll = () => axios.get(baseURL).then(res => res.data)\n\nconst create = newNote => axios.post(baseURL, newNote).then(res => res.data)\n\nconst update = (id, newNote) => axios\n    .put(`${baseURL}/${id}`, newNote)\n    .then(res => res.data)\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Form from './components/Form'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\nimport './index.css'\n\n\n\nconst App = (props) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note goes here')\n    const [showAll, setShowAll] = useState(true)\n    const [message, setMessage] = useState(null)\n\n    // LOAD as effect\n    useEffect(() => {\n      noteService.getAll().then(initialNotes => setNotes(initialNotes))\n     } , [])\n\n\n    // HANDLERS\n    const addNote = (e) => {\n      e.preventDefault()\n      const addedNote = {\n        id: notes.length + 1,\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5\n      }\n\n      // POST REQUEST\n      noteService.create(addedNote)\n        .then(addedNote => {\n          setMessage({\n            text: `the note '${addedNote.content}' was saved to server`,\n            type: \"success\"\n          })\n          setTimeout(() => setMessage(null), 2000)\n          setNotes(notes.concat(addedNote))\n          setNewNote('a new note goes here')\n        })\n    }\n\n    const handleNoteChange = (e) => setNewNote(e.target.value)\n\n    const toggleImportanceOf = id => () => {\n    \n      // \n      const note = notes.find(note => note.id === id)\n      const changedNote = {...note, important: !note.important}\n\n      noteService.update(id, changedNote)\n        .then(changedNote => {\n          setNotes(notes.map((note) => (note.id === id)\n          ? changedNote \n          : note\n          ))\n          setMessage({\n            text: `the note's importance was changed to'${(note.important) ? \"important\" : \"not important\"}'`,\n            type: \"success\"\n          })\n          setTimeout(() => setMessage(null), 3000)\n        })\n        .catch(e => {\n          setMessage({\n            text: `the note '${note.content}' was already deleted from server`,\n            type: \"error\"\n          })\n          \n          setNotes(notes.filter(note => note.id !== id))\n        })\n    }\n  \n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n    // DISPLAY\n    const rows = () => notesToShow.map(note =>\n      <Note \n        toggleImportance={toggleImportanceOf(note.id)}\n        key={note.id} \n        note={note} \n      />)\n  \n      \n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={ message }/>\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'All'}\n          </button>\n        </div>\n        <ul>\n          {rows()}\n        </ul>\n        <Form \n          onSubmit={addNote} \n          onChange={handleNoteChange} \n          onfocus={() => {if (newNote === 'a new note goes here') setNewNote('')}}\n          onblur={() => {if (newNote === '') setNewNote('a new note goes here')}}\n          input={newNote} \n          text=\"save\" \n        />\n        <Footer />\n      </div>\n    )\n  }\n\n  export default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}